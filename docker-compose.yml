version: '3.7'

name: "bfts"

services:
  kafka:
    image: confluentinc/cp-kafka:7.4.1
    hostname: kafka
    container_name: "${COMPOSE_PROJECT_NAME}-kafka"
    networks: 
      - feed-testing-sandbox
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL_DOCKER_HOST:PLAINTEXT,INTERNAL_DOCKER_CONTROLLER_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL_DOCKER_HOST://kafka:29092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-broker -Dcom.sun.management.jmxremote.rmi.port=9101"
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'INTERNAL_DOCKER_HOST://0.0.0.0:29092,INTERNAL_DOCKER_CONTROLLER_HOST://kafka:29093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL_DOCKER_HOST'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'INTERNAL_DOCKER_CONTROLLER_HOST'
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qc'
    healthcheck:
      test: ["CMD-SHELL", "nc -z kafka 29092"]
      interval: 2s
      timeout: 5s
      retries: 30
      start_period: 5s
    volumes:
      - "kafka-broker-data:/var/lib/kafka/data"

  init-kafka:
    image: confluentinc/cp-kafka:7.4.1
    hostname: init-kafka
    container_name: "${COMPOSE_PROJECT_NAME}-init-kafka"
    depends_on:
        kafka:
            condition: service_healthy
    networks: 
      - feed-testing-sandbox
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic feed-testing-sandbox-generator --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic feed-testing-sandbox-consumer --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: "${COMPOSE_PROJECT_NAME}-kafka-ui"
    hostname: kafka-ui
    networks: 
      - feed-testing-sandbox
    ports:
      - "${BFTS_KAFKA_UI_PORT:-8080}:8080"
    depends_on:
        kafka:
            condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: feed_testing_tools
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9101
      DYNAMIC_CONFIG_ENABLED: 'true'  # not necessary, added for tests
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: 'true'
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: 'true'

  generator:
    image: "beterco/beter-feed-testing-sandbox-generator:${BFTS_GENERATOR_DOCKER_IMAGE_VERSION:-latest}"
    container_name: "${COMPOSE_PROJECT_NAME}-generator"
    networks: 
      - feed-testing-sandbox
    ports:
      - "${BFTS_GENERATOR_PORT:-51857}:80"
    healthcheck:
      test: curl --fail http://localhost:80/health
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
        kafka:
            condition: service_healthy
        init-kafka:
            condition: service_completed_successfully
    environment:
      - "ASPNETCORE_ENVIRONMENT=${BFTS_GENERATOR_ASPNETCORE_ENVIRONMENT:-Development}"
      - "ASPNETCORE_URLS=http://+:80"
      - "Publisher__BootstrapServers=kafka:29092"
      - "Publisher__Topic=feed-testing-sandbox-generator"
      - "Publisher__SecurityProtocol=0"
      - "Publisher__AllowAutoCreateTopics=true"

  emulator:
    image: "beterco/beter-feed-testing-sandbox-emulator:${BFTS_EMULATOR_DOCKER_IMAGE_VERSION:-latest}"
    container_name: "${COMPOSE_PROJECT_NAME}-emulator"
    networks: 
      - feed-testing-sandbox
    ports:
      - "${BFTS_EMULATOR_PORT:-51858}:80"
    healthcheck:
      test: curl --fail http://localhost:80/health
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
        kafka:
            condition: service_healthy
        init-kafka:
            condition: service_completed_successfully
    environment:
      - "ASPNETCORE_ENVIRONMENT=${BFTS_EMULATOR_ASPNETCORE_ENVIRONMENT:-Development}"
      - "ASPNETCORE_URLS=http://+:80"
      - "Messaging__ConsumerConfig__BootstrapServers=kafka:29092"
      - "Messaging__ConsumerConfig__SecurityProtocol=0"
      - "Messaging__ConsumerConfig__AutoOffsetReset=Earliest"
      - "Messaging__ConsumerConfig__GroupId=feed-emulator:test"
      - "Messaging__Topics__TestingTools=feed-testing-sandbox-generator"
      - "SignalR__FeedTimeTableEndpoint=/time_table"
      - "SignalR__FeedTradingEndpoint=/trading"
      - "SignalR__FeedScoreboardEndpoint=/scoreboard"
      - "SignalR__FeedIncidentEndpoint=/incident"
      - "Heartbeat__IntervalInSeconds=5"

networks: 
  feed-testing-sandbox:
    driver: bridge  

volumes:
  kafka-broker-data:
