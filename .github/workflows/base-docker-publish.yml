name: Docker Image Publishing Workflow

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
      image_name:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      unit_tests_path:
        required: true
        type: string
      code_coverage_threshold:
        required: true
        type: number
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_PASSWORD:
        required: true

jobs:
  publish_docker_image:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract Metadata (Tags, Labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.image_name }}
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build and Export Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile_path }}/Dockerfile
          load: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Run Unit Tests with Code Coverage
        run: |
          dotnet test ${{ inputs.unit_tests_path }} \
          --configuration Release \
          --verbosity minimal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --settings ${{ inputs.unit_tests_path }}/coverlet.runsettings

      - name: Install ReportGenerator tool
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate Code Coverage Report
        run: reportgenerator -reports:./coverage/**/coverage.cobertura.xml -targetdir:./coverage/report/${{inputs.project_name}} -reporttypes:"JsonSummary"

      - name: Upload Code Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report-${{inputs.project_name}}
          path: ./coverage/report/${{inputs.project_name}}

      - name: Display Code Coverage
        id: extract_coverage
        run: |
          line_coverage=$(jq -r '.summary.linecoverage' ./coverage/report/${{inputs.project_name}}/Summary.json)
          method_coverage=$(jq -r '.summary.methodcoverage' ./coverage/report/${{inputs.project_name}}/Summary.json)
          echo "coverage=$line_coverage" >> $GITHUB_OUTPUT 
          echo "Summary:"
          echo "Line Coverage: $line_coverage%"
          echo "Method Coverage: $method_coverage%"
          
      - name: Check Code Coverage Threshold
        if: steps.extract_coverage.outputs.coverage < inputs.code_coverage_threshold
        run: exit 1
        
      - name: Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile_path }}/Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
